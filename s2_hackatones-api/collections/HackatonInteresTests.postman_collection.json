{
	"info": {
		"_postman_id": "8c54a991-e7ec-46ce-a4ba-79da09dfd326",
		"name": "HackatonInteresTests",
		"description": "Colección de pruebas sobre el recurso AuthorBook",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un interes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8391fc71-23d9-4d29-9e3a-8ba1274ccd92",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_b\",data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":1,\n    \"nombre\": \"Ambiental\",\n    \"descripcion\":\"Por un planeta por donde habitar\",\n    \"imagen\":\"hola\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/intereses",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"intereses"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo libro. El ISBN del recurso debe ser único. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear un interes 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52e7e58a-bd11-4cfd-8da3-7a9e8bbc7c66",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_b2\",data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":2,\n    \"nombre\": \"Economico\",\n    \"descripcion\":\"Por un planeta con menos neolierales\",\n    \"imagen\":\"hola\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/intereses",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"intereses"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo libro. El ISBN del recurso debe ser único. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9f90381-0e2e-4579-93ea-3adddfb389c7",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_a\",data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"nombre\": \"hackaton 1\"\n    }"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo autor. El Id es inicializado por la BD y se debe ver en la respuesta.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Agregar un interes a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5295fcb5-7252-463d-b81a-5124c1a067be",
						"exec": [
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/{{new_id_b}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"{{new_id_b}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nAsocia un libro a un autor en la aplicación. \r\n\r\nSe envía el Id del autor y el del libro a asociar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Agregar un intereses que no existe a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3c06212-e39e-4bc3-9fd1-8abbd1c29ace",
						"exec": [
							"tests[\"No se deberia asociar el author ya que el book no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /intereses/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nAsocia un libro que no existe a un autor en la aplicación. \r\n\r\nSe envía el Id del autor y el del libro a asociar en la URL de la petición.\r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /books/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Obtener un interes de una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7e73fe8-8e21-4eae-a1bf-973c5ccfbfbc",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/{{new_id_b}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"{{new_id_b}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta un libro de un autor en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id del autor y del libro a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un interes que no existe de una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fe51cc4-6ef5-40d2-bc5f-e1200af00028",
						"exec": [
							"tests[\"No se deberia obtener ningun book ya que el book no existe.\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /intereses/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta un libro que no existe de un autor en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error.\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Asociar intereses a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7c5215a-ed1c-498e-9d19-9f5570cfd17d",
						"exec": [
							"tests[\"No genera error en el Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n    \"id\": {{new_id_b}},\n    \"nombre\": \"algo\",\n    \"descripcion\":\"Por un planeta con menos neolierales\",\n    \"imagen\":\"hola\"\n},\n{\n    \"id\": {{new_id_b2}},\n    \"nombre\": \"gg\",\n    \"descripcion\":\"Por un planeta con menos neolierales\",\n    \"imagen\":\"hola\"\n}]"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nActualiza la lista de libros un autor existente.\r\n\r\nSe envía el Id en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener los intereses de un hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49c94c15-1d54-43ee-adef-aec230710223",
						"exec": [
							"var data= JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;",
							"tests[\"books count - author\"] = data.length >= 1;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta los libros de un autor en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id del autor y el del libro a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Asociar Intereses que no existen a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f1389a0-da68-45bc-90aa-eb08f3c8ac36",
						"exec": [
							"tests[\"No se pueden asociar los books ya que estos no existen\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /intereses/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n    \"id\": 0,\n    \"nombre\": \"interes falsa\",\n    \"descripcion\":\"nulo\",\n    \"imagen\":\"nula\"\n}\n]"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nActualiza la lista de libros de una editorial existente con libros que no existen. \r\n\r\nSe envía el Id en la URL de la petición.\r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /books/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrarle un interes a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9510b6cd-b566-4cfa-b16f-9c783800176d",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/{{new_id_b}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"{{new_id_b}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra la asociación entre un libro y un autor. Se envían los ids del autor y del libro creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrarle un interes 2 a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dca29117-b352-4fc0-893d-46bfdd4cd9bf",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/{{new_id_b2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"{{new_id_b2}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra la asociación entre un libro y un autor. Se envían los ids del autor y del libro creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrarle un interes a una hackaton que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91d9959e-4825-4dd7-88e3-3e33b988c765",
						"exec": [
							"tests[\"No se deberia eliminar ninguna asociacion ya que el author no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /hackatones/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/0/intereses/{{new_id_b}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"0",
						"intereses",
						"{{new_id_b}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nBorra la asociación entre a un libro y un autor que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /authors/0/books no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar un interes que no existe a una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db442b05-4aea-4f64-9db1-a28176069f5e",
						"exec": [
							"tests[\"No se deberia eliminar ninguna asociacion ya que el book no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /intereses/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}/intereses/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}",
						"intereses",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nBorra la asociación entre un libro que no existe y un autor en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error.\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar un interes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f1e4dc3-ca8a-4517-a81e-7e899528fbf4",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/intereses/{{new_id_b}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"intereses",
						"{{new_id_b}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un libro. Se envía el id del libro creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un interes 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac2c9e22-f152-46e9-8d4e-206c81e38e7b",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/intereses/{{new_id_b2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"intereses",
						"{{new_id_b2}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un libro. Se envía el id del libro creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar una hackaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ff16df-2255-4221-9b63-b026ee61a544",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_hackatones-api/api/hackatones/{{new_id_a}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_hackatones-api",
						"api",
						"hackatones",
						"{{new_id_a}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un autor. Se envía el id del autor creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "abcf9e66-ab71-40eb-b132-268e8563ad4d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "99c46863-220f-4853-9796-88ddc37ae16a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}